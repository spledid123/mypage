#include<string.h>

strlen
 size_t  strlen( const char*  str)
1
功能：计算字符串长度，不包含’\0’
返回值：返回字符串的字符数
说明：

strlen() 函数计算的是字符串的实际长度，遇到第一个’\0’结束；
参数指向的字符串必须以 ’ \0 ‘结束
函数返回值一定是size_t ,是无符号的
如果你只定义没有给它赋初值，这个结果是不定的，它会从首地址一直找下去，直到遇到’\0’停止
sizeof返回的是变量声明后所占的内存数，不是实际长度，此外sizeof不是函数，仅仅是一个操作符，strlen()是函数
strcpy
char* strcpy(char* dest,char* src)
1
功 能: 将参数src字符串拷贝至参数dest所指的地址
返回值: 返回参数dest的字符串起始地址
说明：

源字符串必须以’\0’结束
会将源字符串的’\0’拷贝到目标空间
目标空间必须可变
如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况，在编写程序时需特别留意，或者用strncpy()来取代
strncpy
char* strncpy(char* dest,const char* src,size_t num)
1
功能：拷贝src字符串的前num个字符至dest
返回值：dest字符串起始地址
说明：

如果src字符串长度小于num，则拷贝完字符串后，在目标后追加0，直到num个
strncpy不会向dest追加’\0’
src和dest所指的内存区域不能重叠，且dest必须有足够的空间放置n个字符
strcat
char* strcat(char* dest,const char* src)
1
功能： 字符串拼接
返回值：返回dest字符串起始地址
说明：

- 源字符串必须’\0’结束
- 目标空间必须可修改
- strcat() 会将参数src字符串复制到参数dest所指的字符串尾部
- dest最后的结束字符’\0’会被覆盖掉，并在连接后的字符串的尾部再增加一个’\0’
- dest与src所指的内存空间不能重叠，且dest要有足够的空间来容纳要复制的字符串

strncat
char* strncat (char* dest,const char* src,size_t num)
1
功能：将n个字符追加到字符串结尾
返回值：返回dest字符串的起始地址
说明：

strncat将会从字符串src的开头拷贝n个字符到dest字符串尾部
dest要有足够的空间来容纳要拷贝的字符串
如果n大于字符串src的长度，那么仅将src全部追加到dest的尾部
strncat会将dest字符串最后的’\0’覆盖掉，字符追加完成后，再追加’\0’
strcmp
int strcmp (const char* str1,const char* str2)
1
功能：字符串比较
返回值：若参数s1和s2字符串相同则返回0，s1若大于s2则返回大于0的值，s1若小于s2则返回小于0的值
说明：

判断两个字符串大小1）ASII码 2）长度
区分大小写比较的，如果希望不区分大小写进行字符串比较，可以使用stricmp函数
strncmp
int strncmp(const char* str1,const char* str2,size_t num)
1
功能：指定长度比较
返回值：同strcmp

strstr
char* strstr(const char* str,const char* substr)
功能：检索子串在字符串中首次出现的位置
返回值：返回字符串str中第一次出现子串substr的地址；如果没有检索到子串，则返回NULL

strchr
char* strchr(const char* str,char c)
1
功能：查找字符串中第一次出现c的位置
返回值：返回首次出现c的位置的指针，如果s中不存在c则返回NULL

strrchr
char* strchr(const char* str,char c)
1
功能：查找字符串中最后一次出现c的位置
返回值：返回最后一次出现c的位置的指针，如果s中不存在c则返回NULL

strspn
size_t  strspn(const char* str1, const char* str2)
1
2
功能：用来计算str1字符串开始部分匹配str2字符串的字符个数
返回值：返回字符串str1开头连续包含字符串str2内的字符数目。

如果str所包含的字符都属于str2，那么返回str1的长度
如果str的第一个字符不属于str2，那么返回0
strcspn
size_t  strspn(const char* str1, const char* str2)
1
功能：用来计算str1字符串开始部分不匹配str2字符串的字符个数
返回值：返回字符串str1开头部分不出现在字符串str2内的字符数目。

strtok
char* strtok(char* str,const char* sep)
1
功能：根据分隔符将字符串分隔成一个个片段
返回值：返回下一个分割后的字符串指针，如果已无从分割则返回NULL
说明：
- sep参数是个字符串，定义了用作分隔符的字符集合
- 第一个参数指定一个字符串，它包含了一个或者多个由sqp字符串中一个或者多个字符分割的标记
- 第一次调用时将字符串首地址传进去，之后调用不用传地址，内部会有static函数保存指向地址
- 分隔符不作为输出内容，只做分界符
- 当strtok在参数s的字符串中发现到参数sep的分割字符时则会将该字符改为’\0’字符
- 在第一次调用时，strtok必须赋予参数str字符串，往后的调用则将参数s设置成NULL
- strtok会修改原字符串，所以必须放至栈上

<stdlib.h>
字符串->整数：
int atoi(const char *str)
long int atol(const char *str)
long int strtol(const char *str, char **endptr, int base)；
//base是str里数的进制,0表示10进制，base∈[2,36]
	long int a;
	char d[10]="1011as";
	char *aa;
	a=strtol(d,&aa,16);//aa="as"
unsigned long int strtoul(const char *str, char **endptr, int base)
字符串->浮点数：	
double atof(const char *str)
double strtod(const char *str, char **endptr)
数->字符串/float也行
int a;char *s;
sprintf(s,"%d",a);




字符分类函数：
<ctype.h>
int isalnum(int c)：检查字符是否为数字或字母；(0~9,a~z,A~Z) 
int isalpha(int c)：检查字符是否为字母；(a~z, A~Z) 
int iscntrl(int c)：检查字符是否为控制字符；(八进制000~037以及177的字符) 
int isdigit(int c)：检查字符是否为十进制数字；(0~9) 
int isgraph(int c)：检查字符是否为图形表示，依赖于使用语言的环境；0~9,a~z,A~Z,以及标点符号) 
int islower(int c)：检查字符是否为小写的字母；(a~z) 
int isprint(int c)：检查字符是否为可打印的；(数字、字母、标点符号、空白字符) 
int ispunct(int c)：检查字符是否为标点符号；(! ” # $ % & ’ ( ) * + , - . / : ; < = > ? @ [ ] ^ _ ` { | } ~等) 
int isspace(int c)：检查字符是否为空白字符；(TAB、换行、垂直TAB、换页、回车、空格) 
int isupper(int c)：检查字符是否为大写字母；(A~Z) 
int isxdigit(int c)：检查字符是否为十六进制数字；(0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f) 

字符转换
int tolower(int c)：转化字符为小写字母； 
int toupper(int c)：转化字符为大写字母；
