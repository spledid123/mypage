/*****************************************************************************/
#include <iostream>
#include <string>
#include <vector>
//#include <list>
/*****************************************************************************/
//using namespace std;
/******************************************************************************
 * 只出现一次的数字
 * 
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素
 * 说明：
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 * 
 * 示例 1:
 * 输入: [2,2,1]
 * 输出: 1
******************************************************************************/

/*****************************************************************************/
class Solution {
public:
    int singleNumber(std::vector<int>& nums) {//异或
        int i, num = nums[0];
        for(i = 1; i < nums.size(); i++){
            num ^= nums[i];
        }
        return num;
    }
    //异或遵循交换率和结合律
    //a ^ b ^ a = a ^ a ^ b = b;
};
/*****************************************************************************/
int main(){
    std::vector <int> array;
    array.push_back(2);
    array.push_back(2);
    array.push_back(1);
    Solution Solution;
    std::cout << Solution.singleNumber(array); 
}